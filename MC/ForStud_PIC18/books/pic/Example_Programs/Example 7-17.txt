/*
 * Joystick controlled motor written for a PIC18F1220
 */

#include <p18cxxx.h>

/* Set configuration bits
 *  - set HS oscillator
 *  - disable watchdog timer
 *  - disable low voltage programming
 *  - disable brownout reset
 *  - enable master clear
 */

#pragma config OSC = HS
#pragma config WDT = OFF
#pragma config LVP = OFF
#pragma config BOR = OFF
#pragma config MCLRE = ON

#pragma code

// main program

char getJoy(void)
{
	ADCON0bits.GO = 1;	//start a conversion
	while ( ADCON0bits.GO == 1 );	// wait for completion
	return ( ADRESL >> 2 | ( ADRESH << 6 );	
}

void main (void)
{	
	ADCON0 = 1;			// select input AN0, enable ADC
	ADCON1 = 0x0e;		// AN0 is analog, VDD and VSS are references 
	ADCON2 = 0x8C;		// convert using 1 MHz 
	TRISA = 1;			// Port A bit 1 = output
	TRISB = 0;			// Port B is output

	T2CON = 0;			// select a prescaler of divide by 1
	CCP1CON = 0x4C;		// CCP module off, full, active high output
	TMR2 = 0;			// clear Timer 2
	PR2 = 0xff;			// Timer 2 clears on 255;

	while (1)
	{
		CCPR1L = getJoy()	// read joystick; change speed  
	}

}
