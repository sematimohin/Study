/*
 * ATX power supply monitor using the USB
 */

#include <p18cxxx.h>
#include "system\typedefs.h"                      
#include "system\usb\usb.h"                        
#include "io_cfg.h"  
#include <timers.h>     
#include <adc.h>    
#include <stdlib.h>                     

/* Set configuration bits
 *  - set HS oscillator (4 MHz)
 *  - disable watchdog timer
 *  - disable low voltage programming
 *  - disable brownout reset
 *  - enable master clear
 */

#pragma config FOSC = HSPLL_HS
#pragma config PLLDIV = 1
#pragma config VREGEN = ON
#pragma config WDT = OFF
#pragma config LVP = OFF
#pragma config BOR = OFF
#pragma config MCLRE = ON

char buffer[4][20];
char state = 4;

void MyHighInt(void);		// prototypes

#pragma interrupt MyHighInt	save=PROD					
#pragma code high_vector=0x08	// high_vector is at 0x0008

void high_vector(void)		// the high prioity vector
{
	_asm GOTO MyHighInt _endasm	// goto high software
}

#pragma code

void USBTasks(void)
{
    /*
     * Servicing Hardware
     */
    USBCheckBusStatus();                    // Must use polling method
    if(UCFGbits.UTEYE!=1)
        USBDriverService();                 // Interrupt or polling method
    
    #if defined(USB_USE_CDC)
    CDCTxService();
    #endif

}// end USBTasks

void GetADC( char channel, char number )
{
	char a;
	SetChanADC( channel );
	ConvertADC();
	for ( a = 0; a < 20; a++ )
		buffer[number][a] = 0;
	while ( BusyADC() );
	buffer[number][0] = number + 0x31;
	itoa( ReadADC(), buffer[number] + 1 );
}

void MyHighInt(void)
{
	char a;
	if ( PIR1bits.TMR1IF == 1 )
	{
		PIR1bits.TMR1IF = 0;
		WriteTimer1( -62500 );
		GetADC( ADC_CH0, 0);
		GetADC( ADC_CH1, 1);
		GetADC( ADC_CH2, 2);
		GetADC( ADC_CH3, 3);
		state = 0;			// start transmission
	}
}

// main program


void main (void)
{	
	OpenTimer1( TIMER_INT_ON &		// set timer 1
				T1_8BIT_RW &
				T1_SOURCE_INT &
				T1_PS_1_8);

	WriteTimer1( -62500 );		// every half second

	OpenADC( ADC_FOSC_2 &
			ADC_RIGHT_JUST &
			ADC_0_TAD,
			ADC_CH0 &
			ADC_CH1 &
			ADC_CH2 &
			ADC_CH3 &
			ADC_INT_OFF,
			0x0B);

	INTCONbits.GIEH = 1;

	mInitializeUSBDriver();         // See usbdrv.h

	while( 1 )
	{
		USBTasks();					// must keep pumping
		if( mUSBUSARTIsTxTrfReady() && state != 4 )
		{
			putsUSBUSART(buffer[state]);
			state++;
		}
	}
}

