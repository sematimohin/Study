/*
 * This is Example 5-12  
 */

#include <p18cxxx.h>

/* Set configuration bits
 *  - set HS oscillator
 *  - disable watchdog timer
 *  - disable low voltage programming
 */

#pragma config OSC = HS
#pragma config WDT = OFF
#pragma config LVP = OFF

// program memory data

// lookup table for the uppercase letters

rom near char upperCaseTable[] = 
{
	0x00, 0x80, 0x00, 0x81, 0x82, 0x83, 0x84, 0x85,
	0x00, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x7E, 0x00,
	0x00, 0x8B, 0x00, 0x00, 0x8C, 0x51, 0x21, 0x00,
	0x00, 0x00, 0x5A, 0x53, 0x45, 0x57, 0x40, 0x00,
	0x00, 0x43, 0x58, 0x44, 0x45, 0x24, 0x23, 0x00,
	0x00, 0x20, 0x56, 0x46, 0x54, 0x52, 0x25, 0x00,
	0x00, 0x4E, 0x42, 0x48, 0x47, 0x59, 0x5E, 0x00, 
	0x00, 0x00, 0x4D, 0x4A, 0x55, 0x26, 0x2A, 0x00,
	0x00, 0x3C, 0x4B, 0x49, 0x4F, 0x29, 0x28, 0x00, 
	0x4E, 0x3F, 0x4C, 0x3A, 0x00, 0x50, 0x5F, 0x00,
	0x00, 0x00, 0x22, 0x00, 0x7B, 0x2B, 0x00, 0x00,
	0x8D, 0x00, 0x0D, 0x7D, 0x00, 0x7C, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
	0x00, 0x8E, 0x00, 0x8F, 0x90, 0x00, 0x00, 0x00,
	0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x1B, 0x97,
	0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x00,
	0x00, 0x00, 0x00, 0x9F, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// lookup table for the lowercase letters

rom near char lowerCaseTable[] = 
{
	0x00, 0x80, 0x00, 0x81, 0x82, 0x83, 0x84, 0x85,
	0x00, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x60, 0x00,
	0x00, 0x8B, 0x00, 0x00, 0x8C, 0x71, 0x31, 0x00,
	0x00, 0x00, 0x7A, 0x73, 0x61, 0x77, 0x32, 0x00,
	0x00, 0x63, 0x78, 0x64, 0x65, 0x34, 0x33, 0x00,
	0x00, 0x20, 0x76, 0x66, 0x74, 0x73, 0x35, 0x00,
	0x00, 0x6E, 0x62, 0x68, 0x67, 0x79, 0x36, 0x00, 
	0x00, 0x00, 0x6D, 0x6A, 0x75, 0x37, 0x38, 0x00,
	0x00, 0x2C, 0x6B, 0x69, 0x6F, 0x30, 0x39, 0x00,
	0x2E, 0x2F, 0x6C, 0x3B, 0x00, 0x60, 0x2D, 0x00,
	0x00, 0x00, 0x27, 0x00, 0x5B, 0x3D, 0x00, 0x00, 
	0x8D, 0x00, 0x0D, 0x5D, 0x00, 0x5C, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
	0x00, 0x8E, 0x00, 0x8F, 0x90, 0x00, 0x00, 0x00,
	0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x1B, 0x97,
	0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x00,
	0x00, 0x00, 0x00, 0x9F, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// data memory data

int shift = 0;

// functions

// wait for one complete alternation of the clock input
//
// returns when clock goes high

//
void Wait4Clock(void)
{
	while( PORTAbits.RA1 == 1 );		// while clock = 1
	while( PORTAnits.RA1 == 0 );		// while clock = 0
}

int readChar(void)
{
	int parity = 0;
	int keyData = 0;
	int a;
	Wait4Clock();
	if ( PORTAbits.RA0 == 1 )
		keyData = 0x100;		// if framming error
	
	else	// good start bit
	{
		for ( a = 0; a < 8; a++ )
		{
			keyData >>= 1;	// assemble keyData
			
			Wait4Clock();
			
			keyData |= ( PORTAbits.RA0 == 1 );
			parity += PORTAbits.RA0;
		}
		Wait4Clock();			// get parity bit

		parity ^= PORTAbits.RA0;

		if ( ( parity & 1 ) == 0 )
			keyData = 0x101;	// if parity error

		Wait4Clock();

		if ( PORTAbits.RA0 == 0 )
			keyData = 0x100;	// if no stop; framming error
	}
	return keyData;
}

int	getChar(void)
{
	int step = 0;
	int scanCode = readChar();
	while ( step == 0 && scanCode < 0x100 )
	{
		switch ( scanCode )
		{
			case 0x12:		// shift
			case 0x59:
			{
				shift = 1;
				scanCode = readChar();
				break;
			}
			case 0xF0:		// release
			{
				scanCode = readChar();
				switch ( scanCode )
				{
					case 0x12:	// shift
					case 0x59:
					{
						shift = 0;
						break;
					}
				}
				scanCode = readChar();
				break;
			}
			default:
			{
				step = 1;
				break;
			}
		}
	}
	if ( step = 1 && scanCode < 0x100 )
	{
		if ( shift )
			scanCode = upperCaseTable[ scanCode ];
		else
			scanCode = lowerCaseTable[ scanCode ];
	}
	return scanCode;
}
